/*
    Пакетный менеджер — это инструмент для управления зависимостями вашего проекта, то есть библиотеками и модулями,
    которые используются в вашем коде. Он позволяет автоматически устанавливать, обновлять и удалять эти зависимости,
    а также управлять версиями.

    В JavaScript наиболее популярными пакетными менеджерами являются npm (Node Package Manager) и Yarn.
    Давайте рассмотрим, как использовать эти пакетные менеджеры на примере проекта на ES6.

    1 Для начала необходимо установить Node.js и npm

       (https://nodejs.org) скачиваем установщик для Windows.

       Запускаем установщик

       Необходимо выбрать компоненты, которые вы хотите установить. Убедитесь, что установлены все компоненты,
       включая npm (Node Package Manager), и нажмите на кнопку "Далее".

       Выберете место установки На этом экране вам нужно выбрать место, куда будет установлен Node.js.
       По умолчанию это папка C:\Program Files\nodejs.
       Если вы не хотите менять это, просто нажмите на кнопку "Установить".

       Дождитесь завершения установки
       После того, как вы нажмете на кнопку "Установить", процесс установки начнется. Дождитесь, пока он завершится.

       После завершения установки откройте командную строку и введите команду "node -v".
       Если у вас успешно установлен Node.js, вы увидите его версию. Для проверки установки npm введите команду "npm -v".

     2 Создайте новую директорию для проекта

     3 Инициализируйте проект с помощью npm: npm init
     Вы увидите ряд вопросов, на которые нужно будет ответить. Вы можете оставить большинство из них по умолчанию,
     но убедитесь, что в поле "entry point" указан путь к файлу, который будет являться точкой входа в ваше приложение.

     4 Создайте файл index.js в корне вашей директории проекта
 */

const message = 'Hello, world!';
console.log(message);

/*
    5 Теперь можно запустить наш проект:
    node index.js

    Вы должны увидеть в консоли сообщение "Hello, world!".






    Установка зависимостей с помощью npm
    Теперь давайте рассмотрим, как использовать npm для установки и управления зависимостями нашего проекта.

    Установите библиотеку Lodash с помощью npm:
    npm install lodash
    Эта команда установит последнюю версию Lodash и добавит ее в файл package.json в раздел dependencies.
    Если вы откроете этот файл, то увидите такую запись:
    "dependencies": {
        "lodash": "^4.17.21"
    }


    Добавьте использование Lodash в файл index.js:
 */

const _ = require('lodash');
const message = 'Hello, world!';
console.log(_.upperCase(message));

// Теперь можно запустить проект и увидеть, что Lodash работает:
// node index.js
// Вы должны увидеть сообщение "HELLO, WORLD!".


/*
    Установка зависимостей с помощью Yarn
    Yarn — это альтернативный пакетный менеджер для Node.js, созданный Facebook.
    Он предлагает некоторые улучшения по сравнению с npm,
    включая более быструю установку пакетов и более надежную работу с зависимостями.

    Давайте рассмотрим, как использовать Yarn для установки и управления зависимостями.

    Установите Yarn на свой компьютер, если он еще не установлен. Вы можете скачать его с официального сайта:
    https://classic.yarnpkg.com/en/docs/install/.

    Инициализируйте проект с помощью Yarn:
    yarn init

    Установите библиотеку Lodash с помощью Yarn:
    yarn add lodash

    Эта команда установит последнюю версию Lodash и добавит ее в файл package.json в раздел dependencies.
    Добавьте использование Lodash в файл index.js:

    Так же, если в файле packaje.json уже существуют неустановленные зависимости, их можно установить с помощью команды
    yarn add 
     */

const _ = require('lodash');
const message = 'Hello, world!';
console.log(_.upperCase(message));

// Теперь можно запустить проект и увидеть, что Lodash работает:
// node index.js
// Вы должны увидеть сообщение "HELLO, WORLD!".

/*
    Установка конкретной версии зависимости
    Часто бывает нужно установить конкретную версию зависимости. Для этого нужно указать версию при установке пакета.

    Например, давайте установим версию Lodash 4.17.20:
    npm install lodash@4.17.20 или
    yarn add lodash@4.17.20





    Обновление зависимостей
    Когда вы устанавливаете зависимости, они сохраняются в файле package.json.
    В этом файле также указываются версии зависимостей, которые вы используете.
    Если вы хотите обновить версии зависимостей,
    то нужно вручную отредактировать файл package.json и изменить соответствующие версии.

    Однако есть инструменты, которые могут автоматически обновлять зависимости за вас.
    Например, можно использовать команду npm update или yarn upgrade.
    Эти команды обновят все зависимости до их последних версий.

    Еще более удобным способом является использование специальных инструментов,
    таких как npm-check-updates или yarn-upgrade-all.
    Эти инструменты автоматически обновляют зависимости исходя из указанных вами правил, например, ограничений на версии.

    Давайте рассмотрим пример использования npm-check-updates.

    Установите npm-check-updates глобально:
    npm install -g npm-check-updates

    Перейдите в корневую директорию вашего проекта и запустите команду ncu:
    Команда ncu выведет список всех установленных зависимостей, которые можно обновить до новых версий.

    Обновите зависимости командой ncu -u: ncu -u
    Команда ncu -u обновит версии зависимостей в файле package.json.


    Установите новые версии зависимостей командой npm install или yarn:
    npm install или yarn





    Удаление зависимостей
    Для удаления зависимости из проекта нужно использовать команду npm uninstall или yarn remove.

    Например, чтобы удалить пакет Lodash, нужно выполнить следующую команду:
    npm uninstall lodash или yarn remove lodash
    Эта команда удалит пакет Lodash из вашего проекта и из файла package.json.



    JS-пакетные менеджеры являются мощным инструментом для управления зависимостями в проекте.
    Они позволяют быстро и удобно устанавливать, обновлять и удалять пакеты, а также контролировать версии зависимостей.
 */

//____________________________________________________________________________________________________________________
//____________________________________________________________________________________________________________________
//____________________________________________________________________________________________________________________
/*
    домашнее задание


    Задача 1
    Установка пакетов
    Создайте новый проект и установите в него пакет lodash с помощью npm и Yarn.
*/

// создайте папку проекта и перейдите в нее

/*
    Установка пакета с помощью npm
    npm install lodash

    или

    Установка пакета с помощью Yarn
    yarn add lodash


    При установке пакета lodash npm и Yarn автоматически создадут файл package.json,
    в котором будут указаны зависимости проекта.




    Задача 2 Обновление зависимостей
    Добавьте в проект еще несколько пакетов, например axios и react,
    и обновите их до последних версий с помощью npm-check-updates или yarn-upgrade-all.



    Установка пакетов
    npm install axios react

    Обновление зависимостей с помощью npm-check-updates
    npm install -g npm-check-updates
    ncu -u
    npm install

    Обновление зависимостей с помощью yarn-upgrade-all
    npm install -g yarn-upgrade-all
    yarn upgrade-interactive --latest

    После обновления зависимостей проверьте файл package.json, чтобы убедиться, что версии пакетов изменились.



    Задача 3 Удаление пакетов
    Удалите из проекта пакет react с помощью npm и Yarn.

    Удаление пакета с помощью npm
    npm uninstall react

    Удаление пакета с помощью Yarn
    yarn remove react

    При удалении пакета npm и Yarn автоматически обновят файл package.json, удалив зависимость от удаленного пакета.





    Задача 4 Установка пакетов из локального файла
    Создайте локальный файл my-package-1.0.0.tgz, содержащий пакет my-package версии 1.0.0,
    и установите его в проект с помощью npm и Yarn.


    Создание локального файла
    npm pack my-package

    Установка пакета с помощью npm
    npm install my-package-1.0.0.tgz

    Установка пакета с помощью Yarn
    yarn add my-package-1.0.0.tgz


    При установке пакета из локального файла npm и Yarn автоматически добавят зависимость на этот пакет в файл
    package.json. Если вы изменили версию пакета в файле my-package/package.json,
    то эта версия будет использована при установке пакета.


    Задача 5 Создание собственного пакета
    Создайте собственный пакет my-package, который будет экспортировать функцию hello(),
    выводящую приветствие на экран. С помощью npm и Yarn опубликуйте этот пакет в общедоступном репозитории.


    Создание нового пакета
    создайте папку проекта и перейдите в нее
    npm init

    Добавление функции hello()
    touch index.js
    echo "function hello() { console.log('Hello, world!'); } module.exports = hello;" > index.js

    Публикация пакета в npm
    npm login
    npm publish

    Публикация пакета в Yarn
    yarn login
    yarn publish

    После публикации пакета вы можете установить его в любом другом проекте с помощью npm или Yarn.


    Установка пакета из репозитория npm
    npm install my-package

    Установка пакета из репозитория Yarn
    yarn add my-package


    При установке пакета npm и Yarn автоматически скачают и установят его в проекте.
    Вы можете использовать экспортированную функцию в своем коде.

    const hello = require('my-package');
    hello(); // Выведет "Hello, world!" на экран

 */