/*
    Модули в JavaScript ES6 — это способ организации кода внутри приложения,
    который позволяет создавать отдельные модули (файлы) с независимым функционалом,
    которые могут импортировать другие модули и экспортировать свои функции и переменные
    для использования в других частях приложения.

    Использование модулей позволяет улучшить структуру кода,
    сделать его более читаемым, масштабируемым и удобным для тестирования.

    Пример кода:

    Давайте рассмотрим пример использования модулей в JavaScript ES6 на примере приложения,
    которое будет иметь следующую структуру файлов:

    app.js – основной файл приложения
    module1.js – модуль, который экспортирует функцию
    module2.js – модуль, который импортирует функцию из module1 и экспортирует свою функцию
    Начнем с создания файла module1.js:
 */

// module1.js
export function sayHello(name) {
    console.log(`Hello, ${name}!`);
}


/*
    Здесь мы экспортируем функцию sayHello с помощью ключевого слова export.
    Теперь мы можем импортировать эту функцию в других модулях, используя ключевое слово import.

    Создадим теперь файл module2.js:
 */

// module2.js
import { sayHello } from './module1.js';

export function sayGoodbye(name) {
    sayHello(name);
    console.log(`Goodbye, ${name}!`);
}


/*
    Здесь мы импортируем функцию sayHello из module1 с помощью ключевого слова import
    и используем ее внутри функции sayGoodbye.
    Затем мы экспортируем функцию sayGoodbye с помощью ключевого слова export.

    Наконец, создадим файл app.js, который будет использовать функции из обоих модулей:
 */

// app.js
import { sayHello } from './module1.js';
import { sayGoodbye } from './module2.js';

sayHello('John');
sayGoodbye('John');


/*
    Здесь мы импортируем функции sayHello и sayGoodbye из соответствующих модулей
    и вызываем их внутри основной функции приложения.




    В файлах module1.js и module2.js мы используем ключевые слова export и import
    для определения экспортируемых и импортируемых функций.
    Это позволяет нам использовать функции из одного модуля в другом, не нарушая при этом принципы модульности.

    В файле app.js мы импортируем функции из модулей и вызываем их внутри основной функции приложения.
    Это демонстрирует, как использование модулей позволяет организовывать код внутри приложения
    и упрощает его масштабирование и тестирование.

    Для того, чтобы запустить наше приложение, нам нужно использовать сборщик модулей,
    который соберет все наши модули в один файл, который мы можем запустить в браузере.
    Для этого мы можем использовать сборщик модулей, такой как Webpack или Rollup.

    Давайте рассмотрим пример конфигурации Webpack для нашего приложения.
    Создадим файл webpack.config.js со следующим содержимым:
 */


const path = require('path');

module.exports = {
    entry: './app.js',
    output: {
        filename: 'bundle.js',
        path: path.resolve(__dirname, 'dist'),
    },
    mode: 'development',
};


/*
    Здесь мы указываем точку входа для нашего приложения (app.js),
    а также определяем имя и расположение собранного файла (bundle.js).
    Кроме того, мы устанавливаем режим сборки на 'development',
    что позволяет нам использовать сгенерированный код для отладки и тестирования.

    Теперь мы можем запустить Webpack, чтобы собрать наше приложение:
 */

// $ npx webpack

/*
    Это соберет все модули в один файл и сохранит его в папке dist под именем bundle.js.

    Наконец, мы можем запустить наше приложение, подключив собранный файл в наш HTML-документ:

    <!DOCTYPE html>
    <html>
    <head>
    <meta charset="UTF-8">
        <title>ES6 Modules Example</title>
    </head>
    <body>
    <script src="dist/bundle.js"></script>
    </body>
    </html>


    Теперь, когда мы открываем наш HTML-документ в браузере, мы можем увидеть в консоли сообщения,
    выводимые наши функции из модулей:

    // Hello, John!
    // Hello, John!
    // Goodbye, John!





    Использование модулей в JavaScript ES6 позволяет нам организовывать код внутри приложения,
    что упрощает его структуру и делает его более читаемым, масштабируемым и удобным для тестирования.
    Мы можем экспортировать функции и переменные из одного модуля и импортировать их в другой,
    не нарушая при этом принципы модульности. Кроме того, мы можем использовать сборщики модулей,
    такие как Webpack или Rollup, чтобы собрать все модули в один файл, который можно запустить в браузере.
 */


//____________________________________________________________________________________________________________________
//____________________________________________________________________________________________________________________
//____________________________________________________________________________________________________________________
/*
    домашнее задание


    Задача 1
    Создайте модуль, который экспортирует функцию,
    которая принимает на вход массив чисел и возвращает сумму всех чисел в массиве.
*/

// модуль sum.js
export function sum(arr) {
    let total = 0;
    for (let num of arr) {
        total += num;
    }
    return total;
}

/*
    Здесь мы экспортируем функцию sum с помощью ключевого слова export. Функция принимает на вход массив чисел arr
    и использует цикл for..of для перебора всех чисел в массиве и подсчета их суммы. Функция возвращает общую сумму.
 */


// файл index.js
import { sum } from './sum.js';

const numbers = [1, 2, 3, 4, 5];
const total = sum(numbers);
console.log(total); // 15

/*
    Здесь мы импортируем функцию sum из модуля sum.js с помощью ключевого слова import.
    Мы создаем массив чисел numbers и вызываем функцию sum, передавая ей этот массив.
    Результат функции выводится в консоль.

    Задача 2
    Создайте модуль, который экспортирует константу с объектом,
    содержащим информацию о пользователе (имя, возраст, электронная почта).
 */

// модуль user.js
const user = {
    name: 'Ivan',
    age: 30,
    email: 'ivan@example.com'
};

export default user;

/*
    Здесь мы создаем объект user, содержащий информацию о пользователе,
    и экспортируем его с помощью ключевого слова export default.
 */

// файл index.js
import user from './user.js';

console.log(user.name); // Ivan
console.log(user.age); // 30
console.log(user.email); // ivan@example.com


/*
    Здесь мы импортируем объект user из модуля user.js с помощью ключевого слова import.
    Мы выводим свойства объекта user (имя, возраст и электронную почту) в консоль.
 */




