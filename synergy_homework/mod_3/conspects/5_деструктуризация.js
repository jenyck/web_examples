/*
    Концепция деструктуризации в JavaScript ES6 позволяет извлекать данные из объектов и массивов,
    используя новый синтаксис.
    Вместо того, чтобы получать доступ к каждому свойству объекта или элементу массива отдельно,
    мы можем одновременно получить доступ к нескольким свойствам или элементам, используя деструктуризацию.

    Деструктуризация объектов
    Пример 1: Деструктуризация объекта
    Давайте рассмотрим простой пример объекта:
 */

const person = {
    firstName: 'Ivan',
    lastName: 'Petrov',
    age: 30,
    email: 'IvanPetrov@example.com'
};

/*
    Чтобы получить доступ к свойствам объекта, мы можем использовать следующий синтаксис:
 */

const firstName = person.firstName;
const lastName = person.lastName;
const age = person.age;
const email = person.email;

/*
    Это может быть неудобно, если у нас есть много свойств в объекте.
    Вместо этого мы можем использовать деструктуризацию объекта:
 */

const { firstName, lastName, age, email } = person;

/*
    Теперь мы можем использовать переменные firstName, lastName, age и email для доступа к свойствам объекта person.
    Обратите внимание, что названия переменных соответствуют названиям свойств объекта.

    Пример 2: Переименование свойств объекта
    Иногда мы можем захотеть использовать другое имя переменной для свойства объекта.
    Например:
 */


const person = {
    firstName: 'Ivan',
    lastName: 'Petrov',
    age: 30,
    email: 'IvanPetrov@example.com'
};

const { firstName: first, lastName: last, age, email } = person;

/*
    Здесь мы переименовали свойства firstName и lastName в first и last.
    Теперь мы можем использовать переменные first, last, age и email для доступа к свойствам объекта person.


    Пример 3: Деструктуризация объекта в функции
    Мы можем также использовать деструктуризацию объекта в функциях.
    Например:
 */

function printPerson({ firstName, lastName, age, email }) {
    console.log(`${firstName} ${lastName} (${age}), ${email}`);
}

const person = {
    firstName: 'Ivan',
    lastName: 'Petrov',
    age: 30,
    email: 'IvanPetrov@example.com'
};

printPerson(person);

/*
    Здесь мы передаем объект person в функцию printPerson,
    используя деструктуризацию объекта в качестве параметра функции.

    Деструктуризация массивов
    Пример 4: Деструктуризация массива
    Давайте рассмотрим простой пример массива:
 */

const numbers = [1, 2, 3];

/*
    Чтобы получить доступ к элементам массива, мы можем использовать следующий синтаксис:
 */

const first = numbers[0];
const second = numbers[1];
const third = numbers[2];

/*
    Опять же, это может быть неудобно, если у нас есть много элементов в массиве.
    Вместо этого мы можем использовать деструктуризацию массива:
 */

const [first, second, third] = numbers;


/*
    Теперь мы можем использовать переменные first, second и third для доступа к элементам массива numbers.

    Пример 5: Пропуск элементов массива
    Мы можем также пропустить некоторые элементы массива, используя запятые.
    Например:
 */

const numbers = [1, 2, 3, 4, 5];

const [first, , third, , fifth] = numbers;

/*
    Здесь мы пропустили второй и четвертый элементы массива, используя запятые.

    Пример 6: Деструктуризация массива в функции
    Мы также можем использовать деструктуризацию массива в функциях.
    Например:
 */


function printNumbers([first, second, third]) {
    console.log(`First: ${first}, Second: ${second}, Third: ${third}`);
}

const numbers = [1, 2, 3];

printNumbers(numbers);


/*
    Здесь мы передаем массив numbers в функцию printNumbers,
    используя деструктуризацию массива в качестве параметра функции.

    Пример 7: Оставшиеся элементы массива
    Мы можем также использовать оператор "..." для получения оставшихся элементов массива.
    Например:
*/

const numbers = [1, 2, 3, 4, 5];

const [first, second, ...rest] = numbers;



/*
    Здесь мы используем оператор "..." для получения всех оставшихся элементов массива после второго элемента.
    Они сохраняются в переменной rest.


    Деструктуризация объектов и массивов - это мощный инструмент,
    который помогает нам избежать необходимости получать доступ к каждому свойству объекта
    или элементу массива отдельно.
    Вместо этого мы можем одновременно получить доступ к нескольким свойствам или элементам,
    используя новый синтаксис. Это делает код более читабельным и понятным,
    что помогает сократить время разработки и улучшить общее качество кода.
 */



//________________________________________________________________________________________________________________________
//________________________________________________________________________________________________________________________
//________________________________________________________________________________________________________________________
/*
    домашнее задание

   Задача 1: Деструктуризация объекта
   Создайте объект person со следующими свойствами:

   const person = {
    name: "Ivan",
    age: 30,
    address: {
        city: "Moscow",
        country: "Russia"
  }
};

 */

/*
    С помощью деструктуризации извлеките свойства name и age в переменные name и age соответственно.
    Затем извлеките свойство city в переменную city.
 */

const person = {
    name: "Ivan",
    age: 30,
    address: {
        city: "Moscow",
        country: "Russia"
    }
};

// Деструктуризация объекта
const { name, age, address: { city } } = person;

console.log(name); // "Ivan"
console.log(age); // 30
console.log(city); // "Russia"


/*
    В этом решении мы используем деструктуризацию объекта для извлечения свойств name, age и address из объекта person.
    Мы также используем вложенную деструктуризацию для извлечения свойства city из объекта address.

    Задача 2: Деструктуризация массива
    Создайте массив numbers со следующими элементами:

    const numbers = [1, 2, 3, 4, 5];

    С помощью деструктуризации извлеките первый и третий элементы в переменные first и third.
 */


const numbers = [1, 2, 3, 4, 5];

// Деструктуризация массива
const [first, , third] = numbers;

console.log(first); // 1
console.log(third); // 3


/*
    В этом решении мы используем деструктуризацию массива
    для извлечения первого и третьего элементов из массива numbers.
    Мы используем запятые для пропуска второго и четвертого элементов.

    Задача 3: Деструктуризация в функции
    Создайте функцию printPerson,
    которая принимает объект person со свойствами name, age и address в качестве параметра.
    Используя деструктуризацию, извлеките свойства name, age и address внутри функции.
    Затем используйте эти свойства для вывода строки в консоль.
 */

function printPerson({ name, age, address }) {
    console.log(`Name: ${name}, Age: ${age}, City: ${address.city}`);
}

const person = {
    name: "Ivan",
    age: 30,
    address: {
        city: "Moscow",
        country: "Russia"
    }
};

printPerson(person);
// Вывод в консоль: "Name: Ivan, Age: 30, City: Moscow"

/*
    В этом решении мы создали функцию `printPerson`, которая принимает объект `person` в качестве параметра.
    Мы используем деструктуризацию объекта в сигнатуре функции для извлечения свойств `name`, `age` и `address`
    из объекта `person`. Затем мы используем эти свойства для вывода строки в консоль.

    Задача 4: Деструктуризация с параметрами по умолчанию
    Создайте функцию calculate, которая принимает объект с двумя свойствами x и y в качестве параметра.
    Используя деструктуризацию, извлеките свойства x и y внутри функции. Затем вычислите и верните сумму x и y.
    Если свойства x и y не определены в объекте, установите их значение по умолчанию в 0.
 */

function calculate({ x = 0, y = 0 }) {
  return x + y;
}

const obj1 = { x: 5, y: 3 };
const obj2 = { x: 10 };
const obj3 = {};

console.log(calculate(obj1)); // 8
console.log(calculate(obj2)); // 10
console.log(calculate(obj3)); // 0
console.log(calculate({})); // 0

/*
    В этом решении мы создали функцию calculate, которая принимает объект с свойствами x и y в качестве параметра.
    Мы используем деструктуризацию объекта в сигнатуре функции для извлечения свойств x и y из объекта.
    Затем мы вычисляем сумму x и y и возвращаем результат.
    Если свойства x и y не определены в объекте,
    мы устанавливаем их значение по умолчанию в 0 с помощью параметров по умолчанию в деструктуризации объекта.

    Задача 5: Деструктуризация и переименование
    Создайте объект person со следующими свойствами:

  const person = {
    name: "Ivan",
    age: 30,
    address: {
        city: "Moscow",
        state: "Msc",
        country: "Russia"
    }
  };


    С помощью деструктуризации извлеките свойства name и age в переменные fullName и years соответственно.
    Затем с помощью оператора ... создайте новый объект address2, содержащий свойства state и country.
    Переименуйте свойство state в region и сохраните его значение в переменную location.
    Переименуйте свойство country в nation и сохраните его значение в переменную countryName.
    Наконец, объедините свойства location и countryName в новый объект address3.
 */

const { name: fullName, age: years, address: { state: region, country: nation, ...address2 } } = person;

const location = region;
const countryName = nation;

const address3 = { location, countryName };
console.log(address3); // { location: "Msc", countryName: "Russia" }

/*
    В этом решении мы используем деструктуризацию объекта,
    чтобы извлечь свойства name и age из объекта person и сохранить их значения в переменные fullName и years.
    Затем мы используем деструктуризацию объекта для извлечения свойств state и country из объекта person.address,
    а также оператор ... для сохранения всех остальных свойств в объекте address2.
    Мы также переименовываем свойство state в region и сохраняем его значение в переменную location,
    а свойство country переименовываем в nation и сохраняем его значение в переменную countryName.
    Наконец, мы создаем новый объект address3, объединяя свойства location и countryName.
 */


