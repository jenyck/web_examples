/*
    Концепция "spread" в JavaScript ES6 позволяет распространять значения из массивов,
    объектов и других коллекций на другие коллекции. Рассмотрим примеры использования spread в различных сценариях.

    1. Распространение массивов
    Spread оператор можно использовать для создания новых массивов, включающих все значения из других массивов:
 */

const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];

const newArr = [...arr1, ...arr2]; // [1, 2, 3, 4, 5, 6]

/*
    Здесь мы создаем новый массив newArr, используя оператор spread (...) для распространения значений из arr1 и arr2.

    Также можно использовать оператор spread для создания копии массива:
 */

const originalArr = [1, 2, 3];
const copiedArr = [...originalArr];

console.log(copiedArr); // [1, 2, 3]

/*
    В этом примере мы создаем копию массива originalArr, используя оператор spread.

    2. Распространение объектов
    Оператор spread можно использовать для создания новых объектов, включающих все свойства из других объектов:
 */

const obj1 = { a: 1, b: 2 };
const obj2 = { c: 3, d: 4 };

const newObj = { ...obj1, ...obj2 }; // { a: 1, b: 2, c: 3, d: 4 }

/*
    Здесь мы создаем новый объект newObj, используя оператор spread для распространения свойств из obj1 и obj2.

    Также можно использовать оператор spread для создания копии объекта:
 */

const originalObj = { a: 1, b: 2 };
const copiedObj = { ...originalObj };

console.log(copiedObj); // { a: 1, b: 2 }

/*
    В этом примере мы создаем копию объекта originalObj, используя оператор spread.

    3. Функции и spread
    Spread оператор может использоваться в функциях, чтобы передавать переменное количество аргументов:

 */

function sum(...args) {
    return args.reduce((acc, val) => acc + val, 0);
}

const result = sum(1, 2, 3, 4); // 10

/*
    В этом примере функция sum принимает переменное количество аргументов, используя оператор spread (...args).
    Мы можем передать любое количество аргументов при вызове функции sum, и все они будут объединены в массив args.

     5. Применение spread для функций

    Оператор spread может быть использован для вызова функции с набором аргументов, которые хранятся в массиве:
 */


function printValues(a, b, c) {
  console.log(a, b, c);
}

const arr = [1, 2, 3];

printValues(...arr); // 1 2 3


/*
    В этом примере мы используем оператор spread для вызова функции printValues с аргументами,
    которые хранятся в массиве arr.

    5. Применение spread для строк
    Оператор spread может использоваться для конвертации строки в массив символов:
 */

const str = "hello";
const arr = [...str]; // ["h", "e", "l", "l", "o"]

/*
    Здесь мы используем оператор spread, чтобы распространить каждый символ из строки str в отдельный элемент
    массива arr.
 */


//____________________________________________________________________________________________________________________
//____________________________________________________________________________________________________________________
//____________________________________________________________________________________________________________________
/*
    домашнее задание

    Задача 1
    Напишите функцию mergeArrays,
    которая принимает любое количество массивов в качестве аргументов и возвращает новый массив,
    содержащий все элементы из всех переданных массивов. Используйте оператор spread.
*/

function mergeArrays(...arrays) {
    return [...arrays].reduce((acc, curr) => acc.concat(curr), []);
}

const arr1 = [1, 2, 3];
const arr2 = [4, 5];
const arr3 = [6];

const mergedArr = mergeArrays(arr1, arr2, arr3);

console.log(mergedArr); // [1, 2, 3, 4, 5, 6]

/*
    В этом решении мы определяем функцию mergeArrays,
    которая принимает любое количество массивов в качестве аргументов,
    используя оператор spread ...arrays. Затем мы создаем новый массив,
    распространяя каждый переданный массив с помощью оператора spread [...arrays].
    Мы используем метод reduce() для объединения всех элементов из всех массивов в один массив.
    В конце мы возвращаем новый объединенный массив.

    Задача 2
    Напишите функцию filterNumbers, которая принимает любое количество аргументов и возвращает новый массив,
    содержащий только числа. Используйте оператор spread и метод filter().
 */


function filterNumbers(...args) {
    return args.filter((arg) => typeof arg === "number");
}

const filteredArr = filterNumbers(1, "hello", 2, "world", 3);

console.log(filteredArr); // [1, 2, 3]

/*
    В этом решении мы определяем функцию filterNumbers,
    которая принимает любое количество аргументов с помощью оператора spread ...args.
    Затем мы используем метод filter() для отбора только аргументов, которые являются числами,
    используя оператор typeof.
    В конце мы возвращаем новый массив, содержащий только числа.

    Задача 3
    Напишите функцию sumNumbers,
    которая принимает любое количество чисел в качестве аргументов и возвращает их сумму.
    Используйте оператор spread и метод reduce().
 */

function sumNumbers(...args) {
    return args.reduce((acc, curr) => acc + curr, 0);
}

const sum = sumNumbers(1, 2, 3, 4, 5);

console.log(sum); // 15

/*
    В этом решении мы определяем функцию sumNumbers,
    которая принимает любое количество чисел с помощью оператора spread ...args.
    Затем мы используем метод reduce() для вычисления суммы всех аргументов.
    Значение 0 передано в метод reduce() в качестве начального значения аккумулятора acc.

    Задача 4
    Напишите функцию sortNumbers,
    которая принимает любое количество чисел в качестве аргументов и возвращает новый массив,
    содержащий числа в отсортированном порядке по возрастанию.
    Используйте оператор spread и метод sort().
 */

function sortNumbers(...args) {
    return [...args].sort((a, b) => a - b);
}

const sortedArr = sortNumbers(5, 3, 1, 4, 2);

console.log(sortedArr); // [1, 2, 3, 4, 5]

/*
    В этом решении мы определяем функцию sortNumbers,
    которая принимает любое количество чисел с помощью оператора spread ...args.
    Затем мы создаем новый массив, распространяя все переданные аргументы с помощью оператора spread [...args].
    Мы используем метод sort(), который сортирует элементы массива по возрастанию,
    применяя функцию сравнения (a, b) => a - b.
    В конце мы возвращаем новый массив, содержащий отсортированные числа.

    Задача 5
    Напишите функцию cloneObject, которая принимает объект в качестве аргумента и возвращает его копию.
    Используйте оператор spread.
 */


function cloneObject(obj) {
    return { ...obj };
}

const person = {
    name: "Ivan",
    age: 30,
    address: {
        street: "Pr. Mira",
        city: "Moscow"
    }
};

const clonedPerson = cloneObject(person);

console.log(clonedPerson); // {name: "Ivan", age: 30, address: {street: "Pr. Mira", city: "Moscow"}}

/*
    В этом решении мы определяем функцию cloneObject, которая принимает объект в качестве аргумента.
    Затем мы создаем новый объект, используя оператор spread { ...obj },
    который копирует свойства из исходного объекта obj в новый объект. В конце мы возвращаем новый объект,
    который является копией исходного объекта.
 */
