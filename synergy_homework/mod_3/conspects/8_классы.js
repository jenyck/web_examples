/*
    1. Введение в классы
    Классы - это новый синтаксис, который был введен в ECMAScript 6
    для облегчения создания объектно-ориентированного кода.
    Классы в JavaScript позволяют создавать объекты на основе определенных шаблонов, которые называются классами.
    Классы позволяют объединить данные и функциональность в один объект,
    что делает код более организованным и легким для чтения и понимания.

    2. Создание классов
    Чтобы создать класс в JavaScript, вы можете использовать ключевое слово "class",
    за которым следует имя класса. Например, следующий код создает класс "Person":

 */

class Person {
    // тело класса
}

/*
    3. Конструкторы и свойства класса
    Конструкторы в классах используются для создания новых объектов на основе класса.
    Конструкторы определяются внутри класса и могут иметь параметры.
    Они вызываются при создании нового объекта.

    Конструктор может определять свойства объекта,
    которые будут устанавливаться при создании нового объекта.
    Например, следующий код определяет конструктор для класса Person
    и устанавливает свойства "name" и "age" для нового объекта:
 */

class Person {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
}

/*
    4. Методы класса
    Методы в классах - это функции, которые определяются внутри класса.
    Они могут использоваться для выполнения действий с объектами класса.

    Например,
    следующий код определяет метод "greet" для класса Person, который выводит приветствие с именем объекта Person:
 */

class Person {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }

    greet() {
        console.log(`Привет, меня зовут ${this.name}`);
    }
}

/*
    5. Наследование классов в JavaScript позволяет создавать новые классы на основе существующих классов.
    Это позволяет создавать иерархии классов и использовать код, написанный в родительском классе, в дочерних классах.

    Для создания класса на основе существующего класса используется ключевое слово "extends".
    Например, следующий код создает класс "Student", который наследуется от класса "Person":
 */

class Student extends Person {
    // тело класса
}

/*
    В этом примере класс "Student" наследует свойства и методы класса "Person". Это означает,
    что объекты класса "Student" будут иметь все свойства и методы класса "Person",
    а также свои собственные свойства и методы, если они будут определены.


    6. Приватные свойства и методы
    ES6 также включает поддержку приватных свойств и методов класса.
    Приватные свойства и методы класса могут быть доступны только изнутри класса и не могут быть изменены извне.

    Для создания приватного свойства или метода класса используется символ # перед именем свойства или метода.
    Например, следующий код создает класс "Person" с приватным свойством "age" и приватным методом "getAge":
 */


class Person {
    #age;

    constructor(name, age) {
        this.name = name;
        this.#age = age;
    }

    #getAge() {
        return this.#age;
    }

    greet() {
        console.log(`Привет, меня зовут ${this.name} и мне ${this.#getAge()} лет`);
    }
}


//____________________________________________________

class Animal {
    constructor(name) {
        this.name = name;
    }

    speak() {
        console.log(`${this.name} издает звук`);
    }
}

class Dog extends Animal {
    constructor(name, breed) {
        super(name);
        this.breed = breed;
    }

    speak() {
        console.log(`${this.name} лает`);
    }

    fetch() {
        console.log(`${this.name} принеси мне мяч`);
    }
}

const dog = new Dog('Шарик', 'овчарка');
dog.speak(); // Шарик лает
dog.fetch(); // Шарик принеси мне мяч

/*
    В этом примере класс "Dog" наследует класс "Animal" и определяет свой собственный метод "fetch".
    Объект "dog" создается с использованием класса "Dog" и демонстрирует использование методов и свойств,
    определенных в родительском и дочернем классах.
 */

    
//__________________________________________________________________

class Car {
    constructor(make, model, year) {
        this.make = make;
        this.model = model;
        this.year = year;
    }

    drive() {
        console.log(`Едем на машине ${this.make} ${this.model} года выпуска ${this.year}`);
    }
}

class ElectricCar extends Car {
    constructor(make, model, year, range) {
        super(make, model, year);
        this.range = range;
    }

    charge() {
        console.log(`Заряжаем электромобиль ${this.make} ${this.model} на ${this.range} киллометров`);
    }
}

const tesla = new ElectricCar('Tesla', 'Model S', 2022, 400);
tesla.drive(); // Едем на машине Tesla Model S года выпуска 2022
tesla.charge(); // Заряжаем электромобиль Tesla Model S на 400 киллометров


/*
    В этом примере класс "ElectricCar" наследует класс "Car" и добавляет свойство "range" и метод "charge".
    Объект "tesla" создается с использованием класса "ElectricCar" и демонстрирует использование методов и свойств,
    определенных в родительском и дочернем классах.
 */

//_________________________________________________________________

class Rectangle {
    constructor(width, height) {
        this.width = width;
        this.height = height;
    }

    area() {
        return this.width * this.height;
    }
}

class Square extends Rectangle {
    constructor(side) {
        super(side, side);
    }
}

const rectangle = new Rectangle(5, 10);
console.log(rectangle.area()); // 50

const square = new Square(5);
console.log(square.area()); // 25

/*
    В этом примере класс "Square" наследует класс "Rectangle" и переопределяет конструктор,
    чтобы принимать только один параметр "side". Объект "rectangle" создается с использованием класса "Rectangle",
    а объект "square" создается с использованием класса "Square".
    Метод "area" возвращает площадь прямоугольника или квадрата в зависимости от того,
    какой класс был использован для создания объекта.




    Классы в ES6 предоставляют удобный и элегантный способ организации кода в объектно-ориентированном стиле.
    Они позволяют определять конструкторы, методы, свойства и наследование классов,
    а также использовать приватные свойства и методы.
 */

//____________________________________________________________________________________________________________________
//____________________________________________________________________________________________________________________
//____________________________________________________________________________________________________________________
/*
    домашнее задание

   Задача 1. Создать класс "Person" с конструктором, принимающим параметры "name" и "age".
   Добавить метод "greet", который выводит в консоль приветственное сообщение с именем и возрастом человека.
   Создать объект "person" с именем "John" и возрастом 30, вызвать метод "greet".
*/

class Person {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }

    greet() {
        console.log(`Привет, меня зовут ${this.name} и мне ${this.age} лет.`);
    }
}

const person = new Person('Ivan', 30);
person.greet();


// Результат: Привет, меня зовут Ivan и мне 30 лет.

/*
    Задача 2. Создать класс "Animal" с конструктором, принимающим параметр "name". Добавить метод "speak",
     который выводит в консоль звук, издаваемый животным.
     Создать класс "Dog", который наследует класс "Animal" и добавляет метод "bark",
     который выводит в консоль звук лая собаки.
     Создать объект "dog" с именем "Rex", вызвать методы "speak" и "bark".
 */

class Animal {
    constructor(name) {
        this.name = name;
    }

    speak() {
        console.log('Звук, издаваемый животным');
    }
}

class Dog extends Animal {
    bark() {
        console.log('Гав-гав!');
    }
}

const dog = new Dog('Rex');
dog.speak();
dog.bark();

/*
    Результат:
    Звук, издаваемый животным
    Гав-гав!
 */

/*

    Задача 3. Создать класс "Rectangle" с конструктором, принимающим параметры "width" и "height".
    Добавить методы "getArea" для получения площади прямоугольника
    и "getPerimeter" для получения периметра прямоугольника.
    Создать объект "rectangle" со сторонами 5 и 10, вызвать методы "getArea" и "getPerimeter".

 */

class Rectangle {
    constructor(width, height) {
        this.width = width;
        this.height = height;
    }

    getArea() {
        return this.width * this.height;
    }

    getPerimeter() {
        return 2 * (this.width + this.height);
    }
}

const rectangle = new Rectangle(5, 10);
console.log(`Площадь прямоугольника: ${rectangle.getArea()}`);
console.log(`Периметр прямоугольника: ${rectangle.getPerimeter()}`);

/*
    Результат:
    Площадь прямоугольника: 50
    Периметр прямоугольника: 30
 */

/*

    Задача 4. Создать класс "Point" с конструктором, принимающим параметры "x" и "y".
    Добавить методы "getX" и "getY" для получения координат точки.
    Создать класс "Line" с конструктором, принимающим параметры "point1" и "point2",
    которые являются объектами класса "Point". Добавить метод "getLength" для получения длины линии,
    проходящей через точки. Создать объекты "point1" с координатами (0, 0), "point2" с координатами (3, 4)
    и объект "line" с этими двумя точками, вызвать метод "getLength".

 */


class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }

    getX() {
        return this.x;
    }

    getY() {
        return this.y;
    }
}

class Line {
    constructor(point1, point2) {
        this.point1 = point1;
        this.point2 = point2;
    }

    getLength() {
        const dx = this.point2.getX() - this.point1.getX();
        const dy = this.point2.getY() - this.point1.getY();
        return Math.sqrt(dx ** 2 + dy ** 2);
    }
}

const point1 = new Point(0, 0);
const point2 = new Point(3, 4);
const line = new Line(point1, point2);
console.log(`Длина линии: ${line.getLength()}`);

// Длина линии: 5