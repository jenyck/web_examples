/*
     let - это ключевое слово в ES6, которое используется для объявления переменных.
     Оно имеет некоторые отличия от ключевого слова var, которое использовалось ранее.

      Пример 1: Объявление переменной с помощью let
 */


let my_name = 'John';

console.log(my_name); // John

/*
    В этом примере мы объявляем переменную с именем name и присваиваем ей значение 'John'.
    Затем мы выводим значение переменной в консоль с помощью метода console.log().
    Когда мы запускаем этот код, мы увидим 'John' в консоли.

    Пример 2: Ограничение области видимости переменной, объявленной с помощью let
 */

let f = 10;

if (f === 10) {
    let b = 20;
}

console.log(b); // ReferenceError: b is not defined

/*
    В этом примере мы объявляем переменную с именем a и присваиваем ей значение 10.
    Затем мы используем условную конструкцию if для проверки, равна ли переменная a 10.
    Если это так, мы объявляем переменную с именем b и присваиваем ей значение 20.

    Затем мы пытаемся вывести значение переменной b в консоль.
    Однако мы получаем сообщение об ошибке "ReferenceError: b is not defined".
    Это происходит потому, что переменная b имеет ограниченную область видимости,
    определяемую фигурными скобками блока if. Когда мы пытаемся обратиться к переменной b за пределами блока if,
    она уже не существует.

    Пример 3: Использование let в цикле for

 */

for (let i = 0; i < 5; i++) {
    console.log(i);
}

console.log(i); // ReferenceError: i is not defined

/*
    В этом примере мы используем цикл for для вывода чисел от 0 до 4 в консоль.
    Мы объявляем переменную i с помощью let, что означает,
    что ее область видимости ограничена блоком цикла for.

    Затем мы пытаемся вывести значение переменной i за пределами цикла for.
    Когда мы запускаем этот код, мы получаем сообщение об ошибке "ReferenceError: i is not defined".
    Это происходит потому, что переменная i не существует за пределами блока цикла for.

    Пример 4: Изменение значения переменной

    Переменные, объявленные с помощью let, можно изменять.

 */

let a = 1;
a = 2;
console.log(a); // 2

/*
    В этом примере мы объявляем переменную x с помощью let и устанавливаем ее значение равным 1.
    Затем мы изменяем значение переменной на 2 и выводим значение переменной в консоль. В результате мы получаем 2.

    Таким образом, переменные, объявленные с помощью let, можно изменять в любое время после их объявления.
    Это может быть полезно, когда вам нужно изменять значение переменной в процессе выполнения программы.

    Пример 5: Переменные let в циклах

    Ключевое применение let – это объявление переменных в блоках,
    что позволяет избежать неожиданного поведения при использовании переменных в циклах. Рассмотрим следующий пример:
 */

for (var i = 0; i < 5; i++) {
    setTimeout(function() {
        console.log(i);
    }, 1000);
}

/*
    В этом примере мы используем цикл for для итерации от 0 до 4.
    В каждой итерации мы вызываем функцию setTimeout,
    которая выводит значение переменной i в консоль через одну секунду.

    Но что будет, если мы заменим var на let?
 */

for (let i = 0; i < 5; i++) {
    setTimeout(function() {
        console.log(i);
    }, 1000);
}

/*
    Когда мы используем let вместо var, переменная i будет доступна только в блоке цикла.
    Это означает, что каждый вызов setTimeout получит свое собственное значение переменной i,
    соответствующее каждой итерации цикла.

    Таким образом, при использовании let вместо var мы избегаем неожиданного поведения,
    которое могло бы возникнуть при использовании переменных в циклах, и убеждаемся,
    что каждый вызов setTimeout получает правильное значение переменной i.

    Заключение

    переменные, объявленные с помощью let,
    являются локальными для блока, в котором они были объявлены, и они не подвержены всплытию (hoisting).
    Использование let может помочь избежать неожиданного поведения при использовании переменных в циклах.
 */


//____________________________________________________________________________________________________________________
//____________________________________________________________________________________________________________________
//____________________________________________________________________________________________________________________
/*
    домашнее задание

    Задача 1: Функция, возвращающая сумму двух чисел
    Напишите функцию, которая принимает два числа и возвращает их сумму.
*/


function sum(a, b) {
    return a + b;
}

console.log(sum(2, 3)); // 5

/*
    Задача 2: Вывод четных чисел

    Напишите программу, которая выводит на экран все четные числа от 1 до 10.
    
 */
// Используем цикл for для перебора чисел от 1 до 10
for (let i = 1; i <= 10; i++) {
// Если число четное (остаток от деления на 2 равен 0), то выводим его в консоль
    if (i % 2 === 0) {
        console.log(i);
    }
}
// Вывод: 2 4 6 8 10

/*
    В этом решении мы использовали цикл for для перебора чисел от 1 до 10.
    Внутри цикла мы проверяем, является ли текущее число четным, с помощью операции остатка от деления на 2.
    Если остаток равен 0, то число четное, и мы выводим его в консоль.
 */

/*
    Задача 3: Вычисление факториала

    Напишите программу, которая вычисляет факториал числа n.

*/

// Задаем число, факториал которого нужно вычислить
const n = 5;
// Используем переменную result для хранения результата вычислений
let result = 1;
// Используем цикл for для перебора чисел от 1 до n
for (let i = 1; i <= n; i++) {
// Умножаем result на текущее значение i
    result *= i;
}
// Выводим результат в консоль
console.log(`Факториал числа ${n} равен ${result}`);
// Вывод: Факториал числа 5 равен 120

/*
    В этом решении мы используем переменную n для хранения числа, факториал которого нужно вычислить.
    Затем мы создаем переменную result и устанавливаем ее равной 1, так как факториал числа 1 равен 1.
    Затем мы используем цикл for для перебора чисел от 1 до n и умножаем result на каждое из этих чисел.
    Наконец, мы выводим результат в консоль.
 */


/*
    Задача 4: Использование блока let для создания новой области видимости

    Напишите программу, которая демонстрирует работу блока let для создания новой области видимости.
 */

// Создаем глобальную переменную x и устанавливаем ее значение равным 10
let x = 10

// Выводим значение глобальной переменной в консоль
console.log('Глобальная переменная x =', x);

// Создаем блок, в котором объявляем новую переменную с тем же именем x
{
    let x = 5;
// Выводим значение локальной переменной x в консоль
    console.log('Локальная переменная x =', x);
}

// Выводим значение глобальной переменной в консоль после выполнения блока
console.log('Глобальная переменная x =', x);

// Вывод:
// Глобальная переменная x = 10
// Локальная переменная x = 5
// Глобальная переменная x = 10


/*
    В этом решении мы создаем глобальную переменную x и устанавливаем ее значение равным 10.
    Затем мы выводим значение этой переменной в консоль.

    Далее мы создаем блок с помощью фигурных скобок,
    внутри которого объявляем новую переменную с тем же именем x и устанавливаем ее значение равным 5.
    Затем мы выводим значение этой переменной в консоль.

    После выполнения блока мы снова выводим значение глобальной переменной x в консоль и видим, что оно не изменилось.

    Это происходит потому, что блок let создает новую область видимости для переменной x,
    которая существует только внутри этого блока. После выполнения блока мы вновь обращаемся к глобальной переменной x,
    которая не была изменена внутри блока.
 */