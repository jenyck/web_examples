// Объявление строки в ES6
const name = 'Ivan Petrov';

// Шаблонные строки (Template strings)
const message = `Привет, ${name}! Как дела?`;

// Многострочные шаблонные строки
const multiLineMessage = `
  Привет, ${name}!

  Это многострочная строка,
  которую можно записывать
  на нескольких строках.
`;

console.log(message);
console.log(multiLineMessage);

/*
    мы использовали шаблонные строки, чтобы объединить значение переменной в строку.
 */

// Метод startsWith()
const text = 'Эта строка начинается с префикса';
console.log(text.startsWith('Эта')); // true

// Метод endsWith()
console.log(text.endsWith('фикса')); // true

// Метод includes()
console.log(text.includes('начинается')); // true

/*
    Мы использовали методы startsWith(), endsWith() и includes() для проверки содержимого строки.
 */

// Метод repeat()
const repeatedText = 'abc'.repeat(3);
console.log(repeatedText); // 'abcabcabc'

/*
     Метод repeat() повторяет строку указанное количество раз
 */

// Метод padStart()
const paddedText = '5'.padStart(4, '0');
console.log(paddedText); // '0005'

// Метод padEnd()
const paddedText2 = '5'.padEnd(4, '0');
console.log(paddedText2); // '5000'

/*
    методы padStart() и padEnd() добавляют заданные символы в начало или конец строки до заданной длины.
 */


/*
    Задача 1: Перевернуть строку
    Напишите функцию, которая принимает строку и возвращает ее перевернутую версию.
 */

function reverseString(str) {
    // Разбиваем строку на массив символов, переворачиваем его и объединяем обратно в строку
    return str.split('').reverse().join('');
}

// Пример использования функции
console.log(reverseString('Привет, мир!')); // !рим ,тевирП

/*
    В этом решении мы сначала разбиваем строку на массив символов с помощью метода split().
    Затем мы переворачиваем массив с помощью метода reverse() и объединяем его обратно в строку с помощью метода join().


    Задача 2: Проверить, является ли строка палиндромом
    Напишите функцию, которая принимает строку и возвращает true, если эта строка является палиндромом,
    и false в противном случае.
 */

function isPalindrome(str) {
    // Приводим строку к нижнему регистру, удаляем пробелы и знаки пунктуации
    str = str.toLowerCase().replace(/[^a-z0-9]/g, '');
    // Сравниваем перевернутую строку с исходной
    return str === str.split('').reverse().join('');
}

// Пример использования функции
console.log(isPalindrome('А роза упала на лапу Азора')); // true
console.log(isPalindrome('Привет, мир!')); // false

/*
    В этом решении мы сначала приводим строку к нижнему регистру
    и удаляем все пробелы и знаки пунктуации с помощью метода replace().
    Затем мы сравниваем перевернутую версию строки с исходной, используя методы split(), reverse() и join().

    Задача 3: Найти самое длинное слово в строке
    Напишите функцию, которая принимает строку и возвращает длину самого длинного слова в этой строке.
 */

function findLongestWord(str) {
    // Разбиваем строку на массив слов, находим длину каждого слова и выбираем максимальное значение
    return str.split(' ').reduce((max, word) => Math.max(max, word.length), 0);
}

// Пример использования функции
console.log(findLongestWord('Привет, мир! Как у вас дела?')); // 5

/*
    В этом решении мы сначала разбиваем строку на массив слов с помощью метода split().
    Затем мы используем метод reduce() для нахождения максимальной длины слова в массиве.
    Метод reduce() принимает два аргумента: функцию коллбэк и начальное значение (в нашем случае это 0).
    Функция коллбэк принимает два аргумента: аккумулятор и текущий элемент массива.
    В каждой итерации мы сравниваем длину текущего слова с аккумулятором и выбираем максимальное значение.
 */

//____________________________________________________________________________________________________________________
//____________________________________________________________________________________________________________________
//____________________________________________________________________________________________________________________
/*
    домашнее задание

    Задача 1: Найти количество гласных в строке
    Напишите функцию, которая принимает строку и возвращает количество гласных в этой строке.
*/

function countVowels(str) {
    // Приводим строку к нижнему регистру и находим количество гласных с помощью регулярного выражения
    const vowels = str.toLowerCase().match(/[aeiouауоеияюёэы]/g);
    // Если гласные не найдены, возвращаем 0, иначе возвращаем их количество
    return vowels === null ? 0 : vowels.length;
}

// Пример использования функции
console.log(countVowels('Привет, мир! Как у вас дела?')); // 8


/*
    В этом решении мы сначала приводим строку к нижнему регистру с помощью метода toLowerCase().
    Затем мы находим все гласные в строке с помощью регулярного выражения [aeiouауоеияюёэы] и метода match().
    Результатом вызова метода match() является массив, содержащий все совпадения.
    Если гласные не найдены, метод match() возвращает null. В таком случае мы возвращаем 0,
    иначе мы возвращаем длину массива гласных.

    Задача 2: Преобразовать строку в змеиную нотацию
    Напишите функцию, которая принимает строку и преобразует ее в змеиную нотацию (snake case).
    В змеиной нотации все слова разделяются символом подчеркивания _.
 */

function toSnakeCase(str) {
    // Приводим строку к нижнему регистру и заменяем пробелы и дефисы на символ подчеркивания
    return str.toLowerCase().replace(/[\s-]/g, '_');
}

// Пример использования функции
console.log(toSnakeCase('Привет, мир! Как у вас дела?')); // привет,_мир!_как_у_вас_дела?

/*
    В этом решении мы сначала приводим строку к нижнему регистру с помощью метода toLowerCase().
    Затем мы заменяем все пробелы и дефисы на символ подчеркивания с помощью метода replace().
    Метод replace() принимает два аргумента: шаблон для поиска и строку для замены.
    В нашем случае шаблоном является регулярное выражение [\s-],
    которое соответствует любому пробельному символу (\s) или дефису (-).
    Заменяемые символы заменяем на символ подчеркивания _.
 */